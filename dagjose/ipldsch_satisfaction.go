package dagjose

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	"github.com/ipld/go-ipld-prime/datamodel"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n _Any) AsInterface() _Any__iface {
	return n.x
}

type _Any__Maybe struct {
	m schema.Maybe
	v Any
}
type MaybeAny = *_Any__Maybe

func (m MaybeAny) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeAny) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeAny) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeAny) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeAny) Must() Any {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Any_Bool   = _String{"Bool"}
	memberName__Any_String = _String{"String"}
	memberName__Any_Bytes  = _String{"Bytes"}
	memberName__Any_Int    = _String{"Int"}
	memberName__Any_Float  = _String{"Float"}
	memberName__Any_Map    = _String{"Map"}
	memberName__Any_List   = _String{"List"}
)
var _ datamodel.Node = (Any)(&_Any{})
var _ schema.TypedNode = (Any)(&_Any{})

func (Any) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Any) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Bool":
		if n2, ok := n.x.(Bool); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "String":
		if n2, ok := n.x.(String); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Int":
		if n2, ok := n.x.(Int); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Float":
		if n2, ok := n.x.(Float); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Map":
		if n2, ok := n.x.(Map); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "List":
		if n2, ok := n.x.(List); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Any) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Any) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.LookupByIndex(0)
}
func (n Any) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Any) MapIterator() datamodel.MapIterator {
	return &_Any__MapItr{n, false}
}

type _Any__MapItr struct {
	n    Any
	done bool
}

func (itr *_Any__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		k, v = &memberName__Any_Bool, n2
	case String:
		k, v = &memberName__Any_String, n2
	case Bytes:
		k, v = &memberName__Any_Bytes, n2
	case Int:
		k, v = &memberName__Any_Int, n2
	case Float:
		k, v = &memberName__Any_Float, n2
	case Map:
		k, v = &memberName__Any_Map, n2
	case List:
		k, v = &memberName__Any_List, n2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__MapItr) Done() bool {
	return itr.done
}

func (Any) ListIterator() datamodel.ListIterator {
	return nil
}
func (Any) Length() int64 {
	return 1
}
func (Any) IsAbsent() bool {
	return false
}
func (Any) IsNull() bool {
	return false
}
func (Any) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.AsBool()
}
func (Any) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.AsInt()
}
func (Any) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.AsFloat()
}
func (Any) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.AsString()
}
func (Any) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.AsBytes()
}
func (Any) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Any"}.AsLink()
}
func (Any) Prototype() datamodel.NodePrototype {
	return _Any__Prototype{}
}

type _Any__Prototype struct{}

func (_Any__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Any__Builder
	nb.Reset()
	return &nb
}

type _Any__Builder struct {
	_Any__Assembler
}

func (nb *_Any__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__Builder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__Builder{_Any__Assembler{w: &w, m: &m}}
}

type _Any__Assembler struct {
	w     *_Any
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Bool__Assembler

	ca2 *_String__Assembler

	ca3 *_Bytes__Assembler

	ca4 *_Int__Assembler

	ca5 *_Float__Assembler

	ca6 *_Map__Assembler

	ca7 *_List__Assembler
	ca  uint
}

func (na *_Any__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()

	case 7:
		na.ca7.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Any__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.BeginList(0)
}
func (na *_Any__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignBool(false)
}
func (_Any__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignInt(0)
}
func (_Any__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignFloat(0)
}
func (_Any__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignString("")
}
func (_Any__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignBytes(nil)
}
func (_Any__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any"}.AssignLink(nil)
}
func (na *_Any__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Any", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__Assembler) Prototype() datamodel.NodePrototype {
	return _Any__Prototype{}
}
func (ma *_Any__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "dagjose.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "String":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_String{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_String__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Bytes":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Bytes__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "Int":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_Int{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Int__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Float":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Float{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Float__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "List":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.Any", Key: &_String{k}}
}
func (ma *_Any__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__KeyAssembler)(ma)
}
func (ma *_Any__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 2:
		x := &_String{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_String__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 3:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Bytes__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 4:
		x := &_Int{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Int__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 5:
		x := &_Float{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Float__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 6:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 7:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	default:
		panic("unreachable")
	}
}
func (ma *_Any__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "dagjose.Any", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__Prototype{}
	case "String":
		return _String__Prototype{}
	case "Bytes":
		return _Bytes__Prototype{}
	case "Int":
		return _Int__Prototype{}
	case "Float":
		return _Float__Prototype{}
	case "Map":
		return _Map__Prototype{}
	case "List":
		return _List__Prototype{}
	default:
		return nil
	}
}

type _Any__KeyAssembler _Any__Assembler

func (_Any__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.BeginMap(0)
}
func (_Any__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.BeginList(0)
}
func (na *_Any__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.AssignNull()
}
func (_Any__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.AssignBool(false)
}
func (_Any__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.AssignInt(0)
}
func (_Any__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "dagjose.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "String":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Bytes":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "Int":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Float":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "List":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "dagjose.Any", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Any__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Any) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Any) Representation() datamodel.Node {
	return (*_Any__Repr)(n)
}

type _Any__Repr _Any

var (
	memberName__Any_Bool_serial   = _String{"bool"}
	memberName__Any_String_serial = _String{"string"}
	memberName__Any_Bytes_serial  = _String{"bytes"}
	memberName__Any_Int_serial    = _String{"int"}
	memberName__Any_Float_serial  = _String{"float"}
	memberName__Any_Map_serial    = _String{"map"}
	memberName__Any_List_serial   = _String{"list"}
)
var _ datamodel.Node = &_Any__Repr{}

func (_Any__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Any__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "bool":
		if n2, ok := n.x.(Bool); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "string":
		if n2, ok := n.x.(String); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "int":
		if n2, ok := n.x.(Int); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "float":
		if n2, ok := n.x.(Float); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "map":
		if n2, ok := n.x.(Map); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "list":
		if n2, ok := n.x.(List); ok {
			return n2.Representation(), nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Any__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Any__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.LookupByIndex(0)
}
func (n _Any__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Any__Repr) MapIterator() datamodel.MapIterator {
	return &_Any__ReprMapItr{n, false}
}

type _Any__ReprMapItr struct {
	n    *_Any__Repr
	done bool
}

func (itr *_Any__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		k, v = &memberName__Any_Bool_serial, n2.Representation()
	case String:
		k, v = &memberName__Any_String_serial, n2.Representation()
	case Bytes:
		k, v = &memberName__Any_Bytes_serial, n2.Representation()
	case Int:
		k, v = &memberName__Any_Int_serial, n2.Representation()
	case Float:
		k, v = &memberName__Any_Float_serial, n2.Representation()
	case Map:
		k, v = &memberName__Any_Map_serial, n2.Representation()
	case List:
		k, v = &memberName__Any_List_serial, n2.Representation()
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__ReprMapItr) Done() bool {
	return itr.done
}

func (_Any__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (_Any__Repr) Length() int64 {
	return 1
}
func (_Any__Repr) IsAbsent() bool {
	return false
}
func (_Any__Repr) IsNull() bool {
	return false
}
func (_Any__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.AsBool()
}
func (_Any__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.AsInt()
}
func (_Any__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.AsFloat()
}
func (_Any__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.AsString()
}
func (_Any__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.AsBytes()
}
func (_Any__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Any.Repr"}.AsLink()
}
func (_Any__Repr) Prototype() datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

type _Any__ReprPrototype struct{}

func (_Any__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Any__ReprBuilder
	nb.Reset()
	return &nb
}

type _Any__ReprBuilder struct {
	_Any__ReprAssembler
}

func (nb *_Any__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__ReprBuilder) Reset() {
	var w _Any__Repr
	var m schema.Maybe
	*nb = _Any__ReprBuilder{_Any__ReprAssembler{w: &w, m: &m}}
}

type _Any__ReprAssembler struct {
	w     *_Any__Repr
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Bool__ReprAssembler

	ca2 *_String__ReprAssembler

	ca3 *_Bytes__ReprAssembler

	ca4 *_Int__ReprAssembler

	ca5 *_Float__ReprAssembler

	ca6 *_Map__ReprAssembler

	ca7 *_List__ReprAssembler
	ca  uint
}

func (na *_Any__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()

	case 7:
		na.ca7.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Any__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.BeginList(0)
}
func (na *_Any__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Any.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.AssignBool(false)
}
func (_Any__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.AssignInt(0)
}
func (_Any__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.AssignFloat(0)
}
func (_Any__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.AssignString("")
}
func (_Any__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.AssignBytes(nil)
}
func (_Any__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Any.Repr"}.AssignLink(nil)
}
func (na *_Any__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Any.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}
func (ma *_Any__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "dagjose.Any.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__ReprAssembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "string":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_String{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_String__ReprAssembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "bytes":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Bytes__ReprAssembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "int":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_Int{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Int__ReprAssembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "float":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Float{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Float__ReprAssembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__ReprAssembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "list":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__ReprAssembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.Any.Repr", Key: &_String{k}}
}
func (ma *_Any__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__ReprKeyAssembler)(ma)
}
func (ma *_Any__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__ReprAssembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 2:
		x := &_String{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_String__ReprAssembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 3:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Bytes__ReprAssembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 4:
		x := &_Int{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_Int__ReprAssembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 5:
		x := &_Float{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Float__ReprAssembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 6:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__ReprAssembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 7:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__ReprAssembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	default:
		panic("unreachable")
	}
}
func (ma *_Any__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "dagjose.Any.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__ReprPrototype{}
	case "String":
		return _String__ReprPrototype{}
	case "Bytes":
		return _Bytes__ReprPrototype{}
	case "Int":
		return _Int__ReprPrototype{}
	case "Float":
		return _Float__ReprPrototype{}
	case "Map":
		return _Map__ReprPrototype{}
	case "List":
		return _List__ReprPrototype{}
	default:
		return nil
	}
}

type _Any__ReprKeyAssembler _Any__ReprAssembler

func (_Any__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Any__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Any__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.AssignNull()
}
func (_Any__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Any__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Any__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "dagjose.Any.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "string":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "bytes":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "int":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "float":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "list":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "dagjose.Any.Repr", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Any__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.Any.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n Bool) Bool() bool {
	return n.x
}
func (_Bool__Prototype) FromBool(v bool) (Bool, error) {
	n := _Bool{v}
	return &n, nil
}

type _Bool__Maybe struct {
	m schema.Maybe
	v _Bool
}
type MaybeBool = *_Bool__Maybe

func (m MaybeBool) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBool) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBool) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBool) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBool) Must() Bool {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bool)(&_Bool{})
var _ schema.TypedNode = (Bool)(&_Bool{})

func (Bool) Kind() datamodel.Kind {
	return datamodel.Kind_Bool
}
func (Bool) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.LookupByString("")
}
func (Bool) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.LookupByNode(nil)
}
func (Bool) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.LookupByIndex(0)
}
func (Bool) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.LookupBySegment(seg)
}
func (Bool) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bool) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bool) Length() int64 {
	return -1
}
func (Bool) IsAbsent() bool {
	return false
}
func (Bool) IsNull() bool {
	return false
}
func (n Bool) AsBool() (bool, error) {
	return n.x, nil
}
func (Bool) AsInt() (int64, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.AsInt()
}
func (Bool) AsFloat() (float64, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.AsFloat()
}
func (Bool) AsString() (string, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.AsString()
}
func (Bool) AsBytes() ([]byte, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.AsBytes()
}
func (Bool) AsLink() (datamodel.Link, error) {
	return mixins.Bool{TypeName: "dagjose.Bool"}.AsLink()
}
func (Bool) Prototype() datamodel.NodePrototype {
	return _Bool__Prototype{}
}

type _Bool__Prototype struct{}

func (_Bool__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bool__Builder
	nb.Reset()
	return &nb
}

type _Bool__Builder struct {
	_Bool__Assembler
}

func (nb *_Bool__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bool__Builder) Reset() {
	var w _Bool
	var m schema.Maybe
	*nb = _Bool__Builder{_Bool__Assembler{w: &w, m: &m}}
}

type _Bool__Assembler struct {
	w *_Bool
	m *schema.Maybe
}

func (na *_Bool__Assembler) reset() {}
func (_Bool__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.BeginMap(0)
}
func (_Bool__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.BeginList(0)
}
func (na *_Bool__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (na *_Bool__Assembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bool__Assembler) AssignInt(int64) error {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.AssignInt(0)
}
func (_Bool__Assembler) AssignFloat(float64) error {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.AssignFloat(0)
}
func (_Bool__Assembler) AssignString(string) error {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.AssignString("")
}
func (_Bool__Assembler) AssignBytes([]byte) error {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.AssignBytes(nil)
}
func (_Bool__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BoolAssembler{TypeName: "dagjose.Bool"}.AssignLink(nil)
}
func (na *_Bool__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bool); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBool(); err != nil {
		return err
	} else {
		return na.AssignBool(v2)
	}
}
func (_Bool__Assembler) Prototype() datamodel.NodePrototype {
	return _Bool__Prototype{}
}
func (Bool) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bool) Representation() datamodel.Node {
	return (*_Bool__Repr)(n)
}

type _Bool__Repr = _Bool

var _ datamodel.Node = &_Bool__Repr{}

type _Bool__ReprPrototype = _Bool__Prototype
type _Bool__ReprAssembler = _Bool__Assembler

func (n Bytes) Bytes() []byte {
	return n.x
}
func (_Bytes__Prototype) FromBytes(v []byte) (Bytes, error) {
	n := _Bytes{v}
	return &n, nil
}

type _Bytes__Maybe struct {
	m schema.Maybe
	v _Bytes
}
type MaybeBytes = *_Bytes__Maybe

func (m MaybeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBytes) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBytes) Must() Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bytes)(&_Bytes{})
var _ schema.TypedNode = (Bytes)(&_Bytes{})

func (Bytes) Kind() datamodel.Kind {
	return datamodel.Kind_Bytes
}
func (Bytes) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.LookupByString("")
}
func (Bytes) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.LookupByNode(nil)
}
func (Bytes) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.LookupByIndex(0)
}
func (Bytes) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.LookupBySegment(seg)
}
func (Bytes) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bytes) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bytes) Length() int64 {
	return -1
}
func (Bytes) IsAbsent() bool {
	return false
}
func (Bytes) IsNull() bool {
	return false
}
func (Bytes) AsBool() (bool, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.AsBool()
}
func (Bytes) AsInt() (int64, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.AsInt()
}
func (Bytes) AsFloat() (float64, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.AsFloat()
}
func (Bytes) AsString() (string, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.AsString()
}
func (n Bytes) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Bytes) AsLink() (datamodel.Link, error) {
	return mixins.Bytes{TypeName: "dagjose.Bytes"}.AsLink()
}
func (Bytes) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}

type _Bytes__Prototype struct{}

func (_Bytes__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bytes__Builder
	nb.Reset()
	return &nb
}

type _Bytes__Builder struct {
	_Bytes__Assembler
}

func (nb *_Bytes__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bytes__Builder) Reset() {
	var w _Bytes
	var m schema.Maybe
	*nb = _Bytes__Builder{_Bytes__Assembler{w: &w, m: &m}}
}

type _Bytes__Assembler struct {
	w *_Bytes
	m *schema.Maybe
}

func (na *_Bytes__Assembler) reset() {}
func (_Bytes__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.BeginMap(0)
}
func (_Bytes__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.BeginList(0)
}
func (na *_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Bytes__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.AssignBool(false)
}
func (_Bytes__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.AssignInt(0)
}
func (_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.AssignFloat(0)
}
func (_Bytes__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.AssignString("")
}
func (na *_Bytes__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bytes__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BytesAssembler{TypeName: "dagjose.Bytes"}.AssignLink(nil)
}
func (na *_Bytes__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Bytes__Assembler) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}
func (Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bytes) Representation() datamodel.Node {
	return (*_Bytes__Repr)(n)
}

type _Bytes__Repr = _Bytes

var _ datamodel.Node = &_Bytes__Repr{}

type _Bytes__ReprPrototype = _Bytes__Prototype
type _Bytes__ReprAssembler = _Bytes__Assembler

func (n Float) Float() float64 {
	return n.x
}
func (_Float__Prototype) FromFloat(v float64) (Float, error) {
	n := _Float{v}
	return &n, nil
}

type _Float__Maybe struct {
	m schema.Maybe
	v _Float
}
type MaybeFloat = *_Float__Maybe

func (m MaybeFloat) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFloat) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFloat) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFloat) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeFloat) Must() Float {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Float)(&_Float{})
var _ schema.TypedNode = (Float)(&_Float{})

func (Float) Kind() datamodel.Kind {
	return datamodel.Kind_Float
}
func (Float) LookupByString(string) (datamodel.Node, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.LookupByString("")
}
func (Float) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.LookupByNode(nil)
}
func (Float) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.LookupByIndex(0)
}
func (Float) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.LookupBySegment(seg)
}
func (Float) MapIterator() datamodel.MapIterator {
	return nil
}
func (Float) ListIterator() datamodel.ListIterator {
	return nil
}
func (Float) Length() int64 {
	return -1
}
func (Float) IsAbsent() bool {
	return false
}
func (Float) IsNull() bool {
	return false
}
func (Float) AsBool() (bool, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.AsBool()
}
func (Float) AsInt() (int64, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.AsInt()
}
func (n Float) AsFloat() (float64, error) {
	return n.x, nil
}
func (Float) AsString() (string, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.AsString()
}
func (Float) AsBytes() ([]byte, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.AsBytes()
}
func (Float) AsLink() (datamodel.Link, error) {
	return mixins.Float{TypeName: "dagjose.Float"}.AsLink()
}
func (Float) Prototype() datamodel.NodePrototype {
	return _Float__Prototype{}
}

type _Float__Prototype struct{}

func (_Float__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Float__Builder
	nb.Reset()
	return &nb
}

type _Float__Builder struct {
	_Float__Assembler
}

func (nb *_Float__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Float__Builder) Reset() {
	var w _Float
	var m schema.Maybe
	*nb = _Float__Builder{_Float__Assembler{w: &w, m: &m}}
}

type _Float__Assembler struct {
	w *_Float
	m *schema.Maybe
}

func (na *_Float__Assembler) reset() {}
func (_Float__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.BeginMap(0)
}
func (_Float__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.BeginList(0)
}
func (na *_Float__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.FloatAssembler{TypeName: "dagjose.Float"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Float__Assembler) AssignBool(bool) error {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.AssignBool(false)
}
func (_Float__Assembler) AssignInt(int64) error {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.AssignInt(0)
}
func (na *_Float__Assembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Float__Assembler) AssignString(string) error {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.AssignString("")
}
func (_Float__Assembler) AssignBytes([]byte) error {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.AssignBytes(nil)
}
func (_Float__Assembler) AssignLink(datamodel.Link) error {
	return mixins.FloatAssembler{TypeName: "dagjose.Float"}.AssignLink(nil)
}
func (na *_Float__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Float); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsFloat(); err != nil {
		return err
	} else {
		return na.AssignFloat(v2)
	}
}
func (_Float__Assembler) Prototype() datamodel.NodePrototype {
	return _Float__Prototype{}
}
func (Float) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Float) Representation() datamodel.Node {
	return (*_Float__Repr)(n)
}

type _Float__Repr = _Float

var _ datamodel.Node = &_Float__Repr{}

type _Float__ReprPrototype = _Float__Prototype
type _Float__ReprAssembler = _Float__Assembler

func (n Int) Int() int64 {
	return n.x
}
func (_Int__Prototype) FromInt(v int64) (Int, error) {
	n := _Int{v}
	return &n, nil
}

type _Int__Maybe struct {
	m schema.Maybe
	v _Int
}
type MaybeInt = *_Int__Maybe

func (m MaybeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeInt) Must() Int {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Int)(&_Int{})
var _ schema.TypedNode = (Int)(&_Int{})

func (Int) Kind() datamodel.Kind {
	return datamodel.Kind_Int
}
func (Int) LookupByString(string) (datamodel.Node, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.LookupByString("")
}
func (Int) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.LookupByNode(nil)
}
func (Int) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.LookupByIndex(0)
}
func (Int) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.LookupBySegment(seg)
}
func (Int) MapIterator() datamodel.MapIterator {
	return nil
}
func (Int) ListIterator() datamodel.ListIterator {
	return nil
}
func (Int) Length() int64 {
	return -1
}
func (Int) IsAbsent() bool {
	return false
}
func (Int) IsNull() bool {
	return false
}
func (Int) AsBool() (bool, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.AsBool()
}
func (n Int) AsInt() (int64, error) {
	return n.x, nil
}
func (Int) AsFloat() (float64, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.AsFloat()
}
func (Int) AsString() (string, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.AsString()
}
func (Int) AsBytes() ([]byte, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.AsBytes()
}
func (Int) AsLink() (datamodel.Link, error) {
	return mixins.Int{TypeName: "dagjose.Int"}.AsLink()
}
func (Int) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}

type _Int__Prototype struct{}

func (_Int__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Int__Builder
	nb.Reset()
	return &nb
}

type _Int__Builder struct {
	_Int__Assembler
}

func (nb *_Int__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int__Builder) Reset() {
	var w _Int
	var m schema.Maybe
	*nb = _Int__Builder{_Int__Assembler{w: &w, m: &m}}
}

type _Int__Assembler struct {
	w *_Int
	m *schema.Maybe
}

func (na *_Int__Assembler) reset() {}
func (_Int__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.BeginMap(0)
}
func (_Int__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.BeginList(0)
}
func (na *_Int__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{TypeName: "dagjose.Int"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.AssignBool(false)
}
func (na *_Int__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.AssignFloat(0)
}
func (_Int__Assembler) AssignString(string) error {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.AssignString("")
}
func (_Int__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.AssignBytes(nil)
}
func (_Int__Assembler) AssignLink(datamodel.Link) error {
	return mixins.IntAssembler{TypeName: "dagjose.Int"}.AssignLink(nil)
}
func (na *_Int__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int__Assembler) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}
func (Int) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int) Representation() datamodel.Node {
	return (*_Int__Repr)(n)
}

type _Int__Repr = _Int

var _ datamodel.Node = &_Int__Repr{}

type _Int__ReprPrototype = _Int__Prototype
type _Int__ReprAssembler = _Int__Assembler

func (n _JOSE) FieldAad() MaybeString {
	return &n.aad
}
func (n _JOSE) FieldCiphertext() MaybeString {
	return &n.ciphertext
}
func (n _JOSE) FieldIv() MaybeString {
	return &n.iv
}
func (n _JOSE) FieldPayload() MaybeString {
	return &n.payload
}
func (n _JOSE) FieldProtected() MaybeString {
	return &n.protected
}
func (n _JOSE) FieldRecipients() MaybeRecipients {
	return &n.recipients
}
func (n _JOSE) FieldSignatures() MaybeSignatures {
	return &n.signatures
}
func (n _JOSE) FieldTag() MaybeString {
	return &n.tag
}
func (n _JOSE) FieldUnprotected() MaybeMap {
	return &n.unprotected
}

type _JOSE__Maybe struct {
	m schema.Maybe
	v JOSE
}
type MaybeJOSE = *_JOSE__Maybe

func (m MaybeJOSE) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeJOSE) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeJOSE) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeJOSE) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeJOSE) Must() JOSE {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__JOSE_Aad         = _String{"aad"}
	fieldName__JOSE_Ciphertext  = _String{"ciphertext"}
	fieldName__JOSE_Iv          = _String{"iv"}
	fieldName__JOSE_Payload     = _String{"payload"}
	fieldName__JOSE_Protected   = _String{"protected"}
	fieldName__JOSE_Recipients  = _String{"recipients"}
	fieldName__JOSE_Signatures  = _String{"signatures"}
	fieldName__JOSE_Tag         = _String{"tag"}
	fieldName__JOSE_Unprotected = _String{"unprotected"}
)
var _ datamodel.Node = (JOSE)(&_JOSE{})
var _ schema.TypedNode = (JOSE)(&_JOSE{})

func (JOSE) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n JOSE) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "aad":
		if n.aad.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.aad.v, nil
	case "ciphertext":
		if n.ciphertext.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.ciphertext.v, nil
	case "iv":
		if n.iv.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.iv.v, nil
	case "payload":
		if n.payload.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.payload.v, nil
	case "protected":
		if n.protected.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.protected.v, nil
	case "recipients":
		if n.recipients.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.recipients.v, nil
	case "signatures":
		if n.signatures.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.signatures.v, nil
	case "tag":
		if n.tag.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.tag.v, nil
	case "unprotected":
		if n.unprotected.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.unprotected.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n JOSE) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (JOSE) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.LookupByIndex(0)
}
func (n JOSE) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n JOSE) MapIterator() datamodel.MapIterator {
	return &_JOSE__MapItr{n, 0}
}

type _JOSE__MapItr struct {
	n   JOSE
	idx int
}

func (itr *_JOSE__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 9 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__JOSE_Aad
		if itr.n.aad.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.aad.v
	case 1:
		k = &fieldName__JOSE_Ciphertext
		if itr.n.ciphertext.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.ciphertext.v
	case 2:
		k = &fieldName__JOSE_Iv
		if itr.n.iv.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.iv.v
	case 3:
		k = &fieldName__JOSE_Payload
		if itr.n.payload.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.payload.v
	case 4:
		k = &fieldName__JOSE_Protected
		if itr.n.protected.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.protected.v
	case 5:
		k = &fieldName__JOSE_Recipients
		if itr.n.recipients.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.recipients.v
	case 6:
		k = &fieldName__JOSE_Signatures
		if itr.n.signatures.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.signatures.v
	case 7:
		k = &fieldName__JOSE_Tag
		if itr.n.tag.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.tag.v
	case 8:
		k = &fieldName__JOSE_Unprotected
		if itr.n.unprotected.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.unprotected.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_JOSE__MapItr) Done() bool {
	return itr.idx >= 9
}

func (JOSE) ListIterator() datamodel.ListIterator {
	return nil
}
func (JOSE) Length() int64 {
	return 9
}
func (JOSE) IsAbsent() bool {
	return false
}
func (JOSE) IsNull() bool {
	return false
}
func (JOSE) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.AsBool()
}
func (JOSE) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.AsInt()
}
func (JOSE) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.AsFloat()
}
func (JOSE) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.AsString()
}
func (JOSE) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.AsBytes()
}
func (JOSE) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.JOSE"}.AsLink()
}
func (JOSE) Prototype() datamodel.NodePrototype {
	return _JOSE__Prototype{}
}

type _JOSE__Prototype struct{}

func (_JOSE__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _JOSE__Builder
	nb.Reset()
	return &nb
}

type _JOSE__Builder struct {
	_JOSE__Assembler
}

func (nb *_JOSE__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_JOSE__Builder) Reset() {
	var w _JOSE
	var m schema.Maybe
	*nb = _JOSE__Builder{_JOSE__Assembler{w: &w, m: &m}}
}

type _JOSE__Assembler struct {
	w     *_JOSE
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm             schema.Maybe
	ca_aad         _String__Assembler
	ca_ciphertext  _String__Assembler
	ca_iv          _String__Assembler
	ca_payload     _String__Assembler
	ca_protected   _String__Assembler
	ca_recipients  _Recipients__Assembler
	ca_signatures  _Signatures__Assembler
	ca_tag         _String__Assembler
	ca_unprotected _Map__Assembler
}

func (na *_JOSE__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_aad.reset()
	na.ca_ciphertext.reset()
	na.ca_iv.reset()
	na.ca_payload.reset()
	na.ca_protected.reset()
	na.ca_recipients.reset()
	na.ca_signatures.reset()
	na.ca_tag.reset()
	na.ca_unprotected.reset()
}

var (
	fieldBit__JOSE_Aad         = 1 << 0
	fieldBit__JOSE_Ciphertext  = 1 << 1
	fieldBit__JOSE_Iv          = 1 << 2
	fieldBit__JOSE_Payload     = 1 << 3
	fieldBit__JOSE_Protected   = 1 << 4
	fieldBit__JOSE_Recipients  = 1 << 5
	fieldBit__JOSE_Signatures  = 1 << 6
	fieldBit__JOSE_Tag         = 1 << 7
	fieldBit__JOSE_Unprotected = 1 << 8
	fieldBits__JOSE_sufficient = 0
)

func (na *_JOSE__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_JOSE{}
	}
	return na, nil
}
func (_JOSE__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.BeginList(0)
}
func (na *_JOSE__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_JOSE__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignBool(false)
}
func (_JOSE__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignInt(0)
}
func (_JOSE__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignFloat(0)
}
func (_JOSE__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignString("")
}
func (_JOSE__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignBytes(nil)
}
func (_JOSE__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE"}.AssignLink(nil)
}
func (na *_JOSE__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_JOSE); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.JOSE", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_JOSE__Assembler) Prototype() datamodel.NodePrototype {
	return _JOSE__Prototype{}
}
func (ma *_JOSE__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.aad.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.ciphertext.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.w.iv.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.w.payload.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.w.protected.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.recipients.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.w.signatures.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.w.tag.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.w.unprotected.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_JOSE__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "aad":
		if ma.s&fieldBit__JOSE_Aad != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Aad}
		}
		ma.s += fieldBit__JOSE_Aad
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_aad.w = &ma.w.aad.v
		ma.ca_aad.m = &ma.w.aad.m
		return &ma.ca_aad, nil
	case "ciphertext":
		if ma.s&fieldBit__JOSE_Ciphertext != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Ciphertext}
		}
		ma.s += fieldBit__JOSE_Ciphertext
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_ciphertext.w = &ma.w.ciphertext.v
		ma.ca_ciphertext.m = &ma.w.ciphertext.m
		return &ma.ca_ciphertext, nil
	case "iv":
		if ma.s&fieldBit__JOSE_Iv != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Iv}
		}
		ma.s += fieldBit__JOSE_Iv
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_iv.w = &ma.w.iv.v
		ma.ca_iv.m = &ma.w.iv.m
		return &ma.ca_iv, nil
	case "payload":
		if ma.s&fieldBit__JOSE_Payload != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Payload}
		}
		ma.s += fieldBit__JOSE_Payload
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_payload.w = &ma.w.payload.v
		ma.ca_payload.m = &ma.w.payload.m
		return &ma.ca_payload, nil
	case "protected":
		if ma.s&fieldBit__JOSE_Protected != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Protected}
		}
		ma.s += fieldBit__JOSE_Protected
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m
		return &ma.ca_protected, nil
	case "recipients":
		if ma.s&fieldBit__JOSE_Recipients != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Recipients}
		}
		ma.s += fieldBit__JOSE_Recipients
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_recipients.w = &ma.w.recipients.v
		ma.ca_recipients.m = &ma.w.recipients.m
		return &ma.ca_recipients, nil
	case "signatures":
		if ma.s&fieldBit__JOSE_Signatures != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Signatures}
		}
		ma.s += fieldBit__JOSE_Signatures
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_signatures.w = &ma.w.signatures.v
		ma.ca_signatures.m = &ma.w.signatures.m
		return &ma.ca_signatures, nil
	case "tag":
		if ma.s&fieldBit__JOSE_Tag != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Tag}
		}
		ma.s += fieldBit__JOSE_Tag
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_tag.w = &ma.w.tag.v
		ma.ca_tag.m = &ma.w.tag.m
		return &ma.ca_tag, nil
	case "unprotected":
		if ma.s&fieldBit__JOSE_Unprotected != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Unprotected}
		}
		ma.s += fieldBit__JOSE_Unprotected
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_unprotected.w = &ma.w.unprotected.v
		ma.ca_unprotected.m = &ma.w.unprotected.m
		return &ma.ca_unprotected, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.JOSE", Key: &_String{k}}
}
func (ma *_JOSE__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_JOSE__KeyAssembler)(ma)
}
func (ma *_JOSE__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_aad.w = &ma.w.aad.v
		ma.ca_aad.m = &ma.w.aad.m
		return &ma.ca_aad
	case 1:
		ma.ca_ciphertext.w = &ma.w.ciphertext.v
		ma.ca_ciphertext.m = &ma.w.ciphertext.m
		return &ma.ca_ciphertext
	case 2:
		ma.ca_iv.w = &ma.w.iv.v
		ma.ca_iv.m = &ma.w.iv.m
		return &ma.ca_iv
	case 3:
		ma.ca_payload.w = &ma.w.payload.v
		ma.ca_payload.m = &ma.w.payload.m
		return &ma.ca_payload
	case 4:
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m
		return &ma.ca_protected
	case 5:
		ma.ca_recipients.w = &ma.w.recipients.v
		ma.ca_recipients.m = &ma.w.recipients.m
		return &ma.ca_recipients
	case 6:
		ma.ca_signatures.w = &ma.w.signatures.v
		ma.ca_signatures.m = &ma.w.signatures.m
		return &ma.ca_signatures
	case 7:
		ma.ca_tag.w = &ma.w.tag.v
		ma.ca_tag.m = &ma.w.tag.m
		return &ma.ca_tag
	case 8:
		ma.ca_unprotected.w = &ma.w.unprotected.v
		ma.ca_unprotected.m = &ma.w.unprotected.m
		return &ma.ca_unprotected
	default:
		panic("unreachable")
	}
}
func (ma *_JOSE__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__JOSE_sufficient != fieldBits__JOSE_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_JOSE__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_JOSE__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _JOSE__KeyAssembler _JOSE__Assembler

func (_JOSE__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.BeginMap(0)
}
func (_JOSE__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.BeginList(0)
}
func (na *_JOSE__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.AssignNull()
}
func (_JOSE__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.AssignBool(false)
}
func (_JOSE__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.AssignInt(0)
}
func (_JOSE__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.AssignFloat(0)
}
func (ka *_JOSE__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "aad":
		if ka.s&fieldBit__JOSE_Aad != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Aad}
		}
		ka.s += fieldBit__JOSE_Aad
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "ciphertext":
		if ka.s&fieldBit__JOSE_Ciphertext != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Ciphertext}
		}
		ka.s += fieldBit__JOSE_Ciphertext
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "iv":
		if ka.s&fieldBit__JOSE_Iv != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Iv}
		}
		ka.s += fieldBit__JOSE_Iv
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	case "payload":
		if ka.s&fieldBit__JOSE_Payload != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Payload}
		}
		ka.s += fieldBit__JOSE_Payload
		ka.state = maState_expectValue
		ka.f = 3
		return nil
	case "protected":
		if ka.s&fieldBit__JOSE_Protected != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Protected}
		}
		ka.s += fieldBit__JOSE_Protected
		ka.state = maState_expectValue
		ka.f = 4
		return nil
	case "recipients":
		if ka.s&fieldBit__JOSE_Recipients != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Recipients}
		}
		ka.s += fieldBit__JOSE_Recipients
		ka.state = maState_expectValue
		ka.f = 5
		return nil
	case "signatures":
		if ka.s&fieldBit__JOSE_Signatures != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Signatures}
		}
		ka.s += fieldBit__JOSE_Signatures
		ka.state = maState_expectValue
		ka.f = 6
		return nil
	case "tag":
		if ka.s&fieldBit__JOSE_Tag != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Tag}
		}
		ka.s += fieldBit__JOSE_Tag
		ka.state = maState_expectValue
		ka.f = 7
		return nil
	case "unprotected":
		if ka.s&fieldBit__JOSE_Unprotected != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Unprotected}
		}
		ka.s += fieldBit__JOSE_Unprotected
		ka.state = maState_expectValue
		ka.f = 8
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "dagjose.JOSE", Key: &_String{k}}
	}
}
func (_JOSE__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.AssignBytes(nil)
}
func (_JOSE__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.KeyAssembler"}.AssignLink(nil)
}
func (ka *_JOSE__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_JOSE__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (JOSE) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n JOSE) Representation() datamodel.Node {
	return (*_JOSE__Repr)(n)
}

type _JOSE__Repr _JOSE

var (
	fieldName__JOSE_Aad_serial         = _String{"aad"}
	fieldName__JOSE_Ciphertext_serial  = _String{"ciphertext"}
	fieldName__JOSE_Iv_serial          = _String{"iv"}
	fieldName__JOSE_Payload_serial     = _String{"payload"}
	fieldName__JOSE_Protected_serial   = _String{"protected"}
	fieldName__JOSE_Recipients_serial  = _String{"recipients"}
	fieldName__JOSE_Signatures_serial  = _String{"signatures"}
	fieldName__JOSE_Tag_serial         = _String{"tag"}
	fieldName__JOSE_Unprotected_serial = _String{"unprotected"}
)
var _ datamodel.Node = &_JOSE__Repr{}

func (_JOSE__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_JOSE__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "aad":
		if n.aad.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.aad.v.Representation(), nil
	case "ciphertext":
		if n.ciphertext.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.ciphertext.v.Representation(), nil
	case "iv":
		if n.iv.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.iv.v.Representation(), nil
	case "payload":
		if n.payload.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.payload.v.Representation(), nil
	case "protected":
		if n.protected.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.protected.v.Representation(), nil
	case "recipients":
		if n.recipients.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.recipients.v.Representation(), nil
	case "signatures":
		if n.signatures.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.signatures.v.Representation(), nil
	case "tag":
		if n.tag.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.tag.v.Representation(), nil
	case "unprotected":
		if n.unprotected.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.unprotected.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_JOSE__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_JOSE__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.LookupByIndex(0)
}
func (n _JOSE__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_JOSE__Repr) MapIterator() datamodel.MapIterator {
	end := 9
	if n.unprotected.m == schema.Maybe_Absent {
		end = 8
	} else {
		goto done
	}
	if n.tag.m == schema.Maybe_Absent {
		end = 7
	} else {
		goto done
	}
	if n.signatures.m == schema.Maybe_Absent {
		end = 6
	} else {
		goto done
	}
	if n.recipients.m == schema.Maybe_Absent {
		end = 5
	} else {
		goto done
	}
	if n.protected.m == schema.Maybe_Absent {
		end = 4
	} else {
		goto done
	}
	if n.payload.m == schema.Maybe_Absent {
		end = 3
	} else {
		goto done
	}
	if n.iv.m == schema.Maybe_Absent {
		end = 2
	} else {
		goto done
	}
	if n.ciphertext.m == schema.Maybe_Absent {
		end = 1
	} else {
		goto done
	}
	if n.aad.m == schema.Maybe_Absent {
		end = 0
	} else {
		goto done
	}
done:
	return &_JOSE__ReprMapItr{n, 0, end}
}

type _JOSE__ReprMapItr struct {
	n   *_JOSE__Repr
	idx int
	end int
}

func (itr *_JOSE__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
advance:
	if itr.idx >= 9 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__JOSE_Aad_serial
		if itr.n.aad.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.aad.v.Representation()
	case 1:
		k = &fieldName__JOSE_Ciphertext_serial
		if itr.n.ciphertext.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.ciphertext.v.Representation()
	case 2:
		k = &fieldName__JOSE_Iv_serial
		if itr.n.iv.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.iv.v.Representation()
	case 3:
		k = &fieldName__JOSE_Payload_serial
		if itr.n.payload.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.payload.v.Representation()
	case 4:
		k = &fieldName__JOSE_Protected_serial
		if itr.n.protected.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.protected.v.Representation()
	case 5:
		k = &fieldName__JOSE_Recipients_serial
		if itr.n.recipients.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.recipients.v.Representation()
	case 6:
		k = &fieldName__JOSE_Signatures_serial
		if itr.n.signatures.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.signatures.v.Representation()
	case 7:
		k = &fieldName__JOSE_Tag_serial
		if itr.n.tag.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.tag.v.Representation()
	case 8:
		k = &fieldName__JOSE_Unprotected_serial
		if itr.n.unprotected.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.unprotected.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_JOSE__ReprMapItr) Done() bool {
	return itr.idx >= itr.end
}
func (_JOSE__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_JOSE__Repr) Length() int64 {
	l := 9
	if rn.aad.m == schema.Maybe_Absent {
		l--
	}
	if rn.ciphertext.m == schema.Maybe_Absent {
		l--
	}
	if rn.iv.m == schema.Maybe_Absent {
		l--
	}
	if rn.payload.m == schema.Maybe_Absent {
		l--
	}
	if rn.protected.m == schema.Maybe_Absent {
		l--
	}
	if rn.recipients.m == schema.Maybe_Absent {
		l--
	}
	if rn.signatures.m == schema.Maybe_Absent {
		l--
	}
	if rn.tag.m == schema.Maybe_Absent {
		l--
	}
	if rn.unprotected.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_JOSE__Repr) IsAbsent() bool {
	return false
}
func (_JOSE__Repr) IsNull() bool {
	return false
}
func (_JOSE__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.AsBool()
}
func (_JOSE__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.AsInt()
}
func (_JOSE__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.AsFloat()
}
func (_JOSE__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.AsString()
}
func (_JOSE__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.AsBytes()
}
func (_JOSE__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.JOSE.Repr"}.AsLink()
}
func (_JOSE__Repr) Prototype() datamodel.NodePrototype {
	return _JOSE__ReprPrototype{}
}

type _JOSE__ReprPrototype struct{}

func (_JOSE__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _JOSE__ReprBuilder
	nb.Reset()
	return &nb
}

type _JOSE__ReprBuilder struct {
	_JOSE__ReprAssembler
}

func (nb *_JOSE__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_JOSE__ReprBuilder) Reset() {
	var w _JOSE__Repr
	var m schema.Maybe
	*nb = _JOSE__ReprBuilder{_JOSE__ReprAssembler{w: &w, m: &m}}
}

type _JOSE__ReprAssembler struct {
	w     *_JOSE__Repr
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm             schema.Maybe
	ca_aad         _String__ReprAssembler
	ca_ciphertext  _String__ReprAssembler
	ca_iv          _String__ReprAssembler
	ca_payload     _String__ReprAssembler
	ca_protected   _String__ReprAssembler
	ca_recipients  _Recipients__ReprAssembler
	ca_signatures  _Signatures__ReprAssembler
	ca_tag         _String__ReprAssembler
	ca_unprotected _Map__ReprAssembler
}

func (na *_JOSE__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_aad.reset()
	na.ca_ciphertext.reset()
	na.ca_iv.reset()
	na.ca_payload.reset()
	na.ca_protected.reset()
	na.ca_recipients.reset()
	na.ca_signatures.reset()
	na.ca_tag.reset()
	na.ca_unprotected.reset()
}
func (na *_JOSE__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_JOSE{}
	}
	return na, nil
}
func (_JOSE__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.BeginList(0)
}
func (na *_JOSE__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_JOSE__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.AssignBool(false)
}
func (_JOSE__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.AssignInt(0)
}
func (_JOSE__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.AssignFloat(0)
}
func (_JOSE__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.AssignString("")
}
func (_JOSE__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.AssignBytes(nil)
}
func (_JOSE__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.JOSE.Repr"}.AssignLink(nil)
}
func (na *_JOSE__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_JOSE); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.JOSE.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_JOSE__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _JOSE__ReprPrototype{}
}
func (ma *_JOSE__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.aad.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.ciphertext.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.w.iv.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.w.payload.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.w.protected.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.recipients.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.w.signatures.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.w.tag.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.w.unprotected.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_JOSE__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "aad":
		if ma.s&fieldBit__JOSE_Aad != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Aad_serial}
		}
		ma.s += fieldBit__JOSE_Aad
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_aad.w = &ma.w.aad.v
		ma.ca_aad.m = &ma.w.aad.m

		return &ma.ca_aad, nil
	case "ciphertext":
		if ma.s&fieldBit__JOSE_Ciphertext != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Ciphertext_serial}
		}
		ma.s += fieldBit__JOSE_Ciphertext
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_ciphertext.w = &ma.w.ciphertext.v
		ma.ca_ciphertext.m = &ma.w.ciphertext.m

		return &ma.ca_ciphertext, nil
	case "iv":
		if ma.s&fieldBit__JOSE_Iv != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Iv_serial}
		}
		ma.s += fieldBit__JOSE_Iv
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_iv.w = &ma.w.iv.v
		ma.ca_iv.m = &ma.w.iv.m

		return &ma.ca_iv, nil
	case "payload":
		if ma.s&fieldBit__JOSE_Payload != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Payload_serial}
		}
		ma.s += fieldBit__JOSE_Payload
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_payload.w = &ma.w.payload.v
		ma.ca_payload.m = &ma.w.payload.m

		return &ma.ca_payload, nil
	case "protected":
		if ma.s&fieldBit__JOSE_Protected != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Protected_serial}
		}
		ma.s += fieldBit__JOSE_Protected
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m

		return &ma.ca_protected, nil
	case "recipients":
		if ma.s&fieldBit__JOSE_Recipients != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Recipients_serial}
		}
		ma.s += fieldBit__JOSE_Recipients
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_recipients.w = &ma.w.recipients.v
		ma.ca_recipients.m = &ma.w.recipients.m

		return &ma.ca_recipients, nil
	case "signatures":
		if ma.s&fieldBit__JOSE_Signatures != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Signatures_serial}
		}
		ma.s += fieldBit__JOSE_Signatures
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_signatures.w = &ma.w.signatures.v
		ma.ca_signatures.m = &ma.w.signatures.m

		return &ma.ca_signatures, nil
	case "tag":
		if ma.s&fieldBit__JOSE_Tag != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Tag_serial}
		}
		ma.s += fieldBit__JOSE_Tag
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_tag.w = &ma.w.tag.v
		ma.ca_tag.m = &ma.w.tag.m

		return &ma.ca_tag, nil
	case "unprotected":
		if ma.s&fieldBit__JOSE_Unprotected != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Unprotected_serial}
		}
		ma.s += fieldBit__JOSE_Unprotected
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_unprotected.w = &ma.w.unprotected.v
		ma.ca_unprotected.m = &ma.w.unprotected.m

		return &ma.ca_unprotected, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.JOSE.Repr", Key: &_String{k}}
}
func (ma *_JOSE__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_JOSE__ReprKeyAssembler)(ma)
}
func (ma *_JOSE__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_aad.w = &ma.w.aad.v
		ma.ca_aad.m = &ma.w.aad.m

		return &ma.ca_aad
	case 1:
		ma.ca_ciphertext.w = &ma.w.ciphertext.v
		ma.ca_ciphertext.m = &ma.w.ciphertext.m

		return &ma.ca_ciphertext
	case 2:
		ma.ca_iv.w = &ma.w.iv.v
		ma.ca_iv.m = &ma.w.iv.m

		return &ma.ca_iv
	case 3:
		ma.ca_payload.w = &ma.w.payload.v
		ma.ca_payload.m = &ma.w.payload.m

		return &ma.ca_payload
	case 4:
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m

		return &ma.ca_protected
	case 5:
		ma.ca_recipients.w = &ma.w.recipients.v
		ma.ca_recipients.m = &ma.w.recipients.m

		return &ma.ca_recipients
	case 6:
		ma.ca_signatures.w = &ma.w.signatures.v
		ma.ca_signatures.m = &ma.w.signatures.m

		return &ma.ca_signatures
	case 7:
		ma.ca_tag.w = &ma.w.tag.v
		ma.ca_tag.m = &ma.w.tag.m

		return &ma.ca_tag
	case 8:
		ma.ca_unprotected.w = &ma.w.unprotected.v
		ma.ca_unprotected.m = &ma.w.unprotected.m

		return &ma.ca_unprotected
	default:
		panic("unreachable")
	}
}
func (ma *_JOSE__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__JOSE_sufficient != fieldBits__JOSE_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_JOSE__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_JOSE__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _JOSE__ReprKeyAssembler _JOSE__ReprAssembler

func (_JOSE__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.BeginMap(0)
}
func (_JOSE__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_JOSE__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.AssignNull()
}
func (_JOSE__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.AssignBool(false)
}
func (_JOSE__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.AssignInt(0)
}
func (_JOSE__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_JOSE__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "aad":
		if ka.s&fieldBit__JOSE_Aad != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Aad_serial}
		}
		ka.s += fieldBit__JOSE_Aad
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "ciphertext":
		if ka.s&fieldBit__JOSE_Ciphertext != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Ciphertext_serial}
		}
		ka.s += fieldBit__JOSE_Ciphertext
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "iv":
		if ka.s&fieldBit__JOSE_Iv != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Iv_serial}
		}
		ka.s += fieldBit__JOSE_Iv
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	case "payload":
		if ka.s&fieldBit__JOSE_Payload != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Payload_serial}
		}
		ka.s += fieldBit__JOSE_Payload
		ka.state = maState_expectValue
		ka.f = 3
		return nil
	case "protected":
		if ka.s&fieldBit__JOSE_Protected != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Protected_serial}
		}
		ka.s += fieldBit__JOSE_Protected
		ka.state = maState_expectValue
		ka.f = 4
		return nil
	case "recipients":
		if ka.s&fieldBit__JOSE_Recipients != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Recipients_serial}
		}
		ka.s += fieldBit__JOSE_Recipients
		ka.state = maState_expectValue
		ka.f = 5
		return nil
	case "signatures":
		if ka.s&fieldBit__JOSE_Signatures != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Signatures_serial}
		}
		ka.s += fieldBit__JOSE_Signatures
		ka.state = maState_expectValue
		ka.f = 6
		return nil
	case "tag":
		if ka.s&fieldBit__JOSE_Tag != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Tag_serial}
		}
		ka.s += fieldBit__JOSE_Tag
		ka.state = maState_expectValue
		ka.f = 7
		return nil
	case "unprotected":
		if ka.s&fieldBit__JOSE_Unprotected != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__JOSE_Unprotected_serial}
		}
		ka.s += fieldBit__JOSE_Unprotected
		ka.state = maState_expectValue
		ka.f = 8
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "dagjose.JOSE.Repr", Key: &_String{k}}
}
func (_JOSE__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_JOSE__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.JOSE.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_JOSE__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_JOSE__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n *_List) Lookup(idx int64) Any {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List) LookupMaybe(idx int64) MaybeAny {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Any__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _List__valueAbsent = _Any__Maybe{m: schema.Maybe_Absent}

func (n List) Iterator() *List__Itr {
	return &List__Itr{n, 0}
}

type List__Itr struct {
	n   List
	idx int
}

func (itr *List__Itr) Next() (idx int64, v Any) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Maybe struct {
	m schema.Maybe
	v _List
}
type MaybeList = *_List__Maybe

func (m MaybeList) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList) Must() List {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (List)(&_List{})
var _ schema.TypedNode = (List)(&_List{})

func (List) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (List) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "dagjose.List"}.LookupByString("")
}
func (n List) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "dagjose.List", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List) MapIterator() datamodel.MapIterator {
	return nil
}
func (n List) ListIterator() datamodel.ListIterator {
	return &_List__ListItr{n, 0}
}

type _List__ListItr struct {
	n   List
	idx int
}

func (itr *_List__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List) Length() int64 {
	return int64(len(n.x))
}
func (List) IsAbsent() bool {
	return false
}
func (List) IsNull() bool {
	return false
}
func (List) AsBool() (bool, error) {
	return mixins.List{TypeName: "dagjose.List"}.AsBool()
}
func (List) AsInt() (int64, error) {
	return mixins.List{TypeName: "dagjose.List"}.AsInt()
}
func (List) AsFloat() (float64, error) {
	return mixins.List{TypeName: "dagjose.List"}.AsFloat()
}
func (List) AsString() (string, error) {
	return mixins.List{TypeName: "dagjose.List"}.AsString()
}
func (List) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "dagjose.List"}.AsBytes()
}
func (List) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "dagjose.List"}.AsLink()
}
func (List) Prototype() datamodel.NodePrototype {
	return _List__Prototype{}
}

type _List__Prototype struct{}

func (_List__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__Builder
	nb.Reset()
	return &nb
}

type _List__Builder struct {
	_List__Assembler
}

func (nb *_List__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Builder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__Builder{_List__Assembler{w: &w, m: &m}}
}

type _List__Assembler struct {
	w     *_List
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Any__Assembler
}

func (na *_List__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.BeginMap(0)
}
func (na *_List__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignBool(false)
}
func (_List__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignInt(0)
}
func (_List__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignFloat(0)
}
func (_List__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignString("")
}
func (_List__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignBytes(nil)
}
func (_List__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "dagjose.List"}.AssignLink(nil)
}
func (na *_List__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "dagjose.List", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Assembler) Prototype() datamodel.NodePrototype {
	return _List__Prototype{}
}
func (la *_List__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Any__Prototype{}
}
func (List) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List) Representation() datamodel.Node {
	return (*_List__Repr)(n)
}

type _List__Repr _List

var _ datamodel.Node = &_List__Repr{}

func (_List__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_List__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.LookupByString("")
}
func (nr *_List__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (List)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_List__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (List)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (n _List__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "dagjose.List.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_List__Repr) ListIterator() datamodel.ListIterator {
	return &_List__ReprListItr{(List)(nr), 0}
}

type _List__ReprListItr _List__ListItr

func (itr *_List__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_List__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Any).Representation(), nil
}
func (itr *_List__ReprListItr) Done() bool {
	return (*_List__ListItr)(itr).Done()
}

func (rn *_List__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Repr) IsAbsent() bool {
	return false
}
func (_List__Repr) IsNull() bool {
	return false
}
func (_List__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.AsBool()
}
func (_List__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.AsInt()
}
func (_List__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.AsFloat()
}
func (_List__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.AsString()
}
func (_List__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.AsBytes()
}
func (_List__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "dagjose.List.Repr"}.AsLink()
}
func (_List__Repr) Prototype() datamodel.NodePrototype {
	return _List__ReprPrototype{}
}

type _List__ReprPrototype struct{}

func (_List__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__ReprBuilder
	nb.Reset()
	return &nb
}

type _List__ReprBuilder struct {
	_List__ReprAssembler
}

func (nb *_List__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__ReprBuilder) Reset() {
	var w _List__Repr
	var m schema.Maybe
	*nb = _List__ReprBuilder{_List__ReprAssembler{w: &w, m: &m}}
}

type _List__ReprAssembler struct {
	w     *_List__Repr
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Any__ReprAssembler
}

func (na *_List__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.BeginMap(0)
}
func (na *_List__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "dagjose.List.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.AssignBool(false)
}
func (_List__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.AssignInt(0)
}
func (_List__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.AssignFloat(0)
}
func (_List__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.AssignString("")
}
func (_List__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.AssignBytes(nil)
}
func (_List__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "dagjose.List.Repr"}.AssignLink(nil)
}
func (na *_List__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "dagjose.List.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _List__ReprPrototype{}
}
func (la *_List__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n *_Map) Lookup(k String) Any {
	v, exists := n.m[*k]
	if !exists {
		return nil
	}
	return v
}
func (n *_Map) LookupMaybe(k String) MaybeAny {
	v, exists := n.m[*k]
	if !exists {
		return &_Map__valueAbsent
	}
	return &_Any__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Map__valueAbsent = _Any__Maybe{m: schema.Maybe_Absent}

func (n Map) Iterator() *Map__Itr {
	return &Map__Itr{n, 0}
}

type Map__Itr struct {
	n   Map
	idx int
}

func (itr *Map__Itr) Next() (k String, v Any) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *Map__Itr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

type _Map__Maybe struct {
	m schema.Maybe
	v _Map
}
type MaybeMap = *_Map__Maybe

func (m MaybeMap) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMap) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMap) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMap) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeMap) Must() Map {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Map)(&_Map{})
var _ schema.TypedNode = (Map)(&_Map{})

func (Map) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Map) LookupByString(k string) (datamodel.Node, error) {
	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	v, exists := n.m[k2]
	if !exists {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(k)}
	}
	return v, nil
}
func (n Map) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	k2, ok := k.(String)
	if !ok {
		panic("todo invalid key type error")
		// 'schema.ErrInvalidKey{TypeName:"dagjose.Map", Key:&_String{k}}' doesn't quite cut it: need room to explain the type, and it's not guaranteed k can be turned into a string at all
	}
	v, exists := n.m[*k2]
	if !exists {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(k2.String())}
	}
	return v, nil
}
func (Map) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.LookupByIndex(0)
}
func (n Map) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Map) MapIterator() datamodel.MapIterator {
	return &_Map__MapItr{n, 0}
}

type _Map__MapItr struct {
	n   Map
	idx int
}

func (itr *_Map__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *_Map__MapItr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

func (Map) ListIterator() datamodel.ListIterator {
	return nil
}
func (n Map) Length() int64 {
	return int64(len(n.t))
}
func (Map) IsAbsent() bool {
	return false
}
func (Map) IsNull() bool {
	return false
}
func (Map) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.AsBool()
}
func (Map) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.AsInt()
}
func (Map) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.AsFloat()
}
func (Map) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.AsString()
}
func (Map) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.AsBytes()
}
func (Map) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Map"}.AsLink()
}
func (Map) Prototype() datamodel.NodePrototype {
	return _Map__Prototype{}
}

type _Map__Prototype struct{}

func (_Map__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Map__Builder
	nb.Reset()
	return &nb
}

type _Map__Builder struct {
	_Map__Assembler
}

func (nb *_Map__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__Builder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__Builder{_Map__Assembler{w: &w, m: &m}}
}

type _Map__Assembler struct {
	w     *_Map
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__Assembler
	va _Any__Assembler
}

func (na *_Map__Assembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_String]*_Any, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.BeginList(0)
}
func (na *_Map__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignBool(false)
}
func (_Map__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignInt(0)
}
func (_Map__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignFloat(0)
}
func (_Map__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignString("")
}
func (_Map__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignBytes(nil)
}
func (_Map__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map"}.AssignLink(nil)
}
func (na *_Map__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Map", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__Assembler) Prototype() datamodel.NodePrototype {
	return _Map__Prototype{}
}
func (ma *_Map__Assembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.w = &tz.v
		ma.va.m = &ma.cm
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.va.w = nil
		ma.cm = schema.Maybe_Absent
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, datamodel.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.w = &tz.v
	ma.va.m = &ma.cm
	return &ma.va, nil
}
func (ma *_Map__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Map__Assembler) ValuePrototype(_ string) datamodel.NodePrototype {
	return _Any__Prototype{}
}
func (Map) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Map) Representation() datamodel.Node {
	return (*_Map__Repr)(n)
}

type _Map__Repr _Map

var _ datamodel.Node = &_Map__Repr{}

func (_Map__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (nr *_Map__Repr) LookupByString(k string) (datamodel.Node, error) {
	v, err := (Map)(nr).LookupByString(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_Map__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (Map)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (_Map__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.LookupByIndex(0)
}
func (n _Map__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (nr *_Map__Repr) MapIterator() datamodel.MapIterator {
	return &_Map__ReprMapItr{(Map)(nr), 0}
}

type _Map__ReprMapItr _Map__MapItr

func (itr *_Map__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, err error) {
	k, v, err = (*_Map__MapItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return k, v.(Any).Representation(), nil
}
func (itr *_Map__ReprMapItr) Done() bool {
	return (*_Map__MapItr)(itr).Done()
}

func (_Map__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Map__Repr) Length() int64 {
	return int64(len(rn.t))
}
func (_Map__Repr) IsAbsent() bool {
	return false
}
func (_Map__Repr) IsNull() bool {
	return false
}
func (_Map__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.AsBool()
}
func (_Map__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.AsInt()
}
func (_Map__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.AsFloat()
}
func (_Map__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.AsString()
}
func (_Map__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.AsBytes()
}
func (_Map__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Map.Repr"}.AsLink()
}
func (_Map__Repr) Prototype() datamodel.NodePrototype {
	return _Map__ReprPrototype{}
}

type _Map__ReprPrototype struct{}

func (_Map__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Map__ReprBuilder
	nb.Reset()
	return &nb
}

type _Map__ReprBuilder struct {
	_Map__ReprAssembler
}

func (nb *_Map__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__ReprBuilder) Reset() {
	var w _Map__Repr
	var m schema.Maybe
	*nb = _Map__ReprBuilder{_Map__ReprAssembler{w: &w, m: &m}}
}

type _Map__ReprAssembler struct {
	w     *_Map__Repr
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__ReprAssembler
	va _Any__ReprAssembler
}

func (na *_Map__ReprAssembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_String]*_Any, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.BeginList(0)
}
func (na *_Map__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Map.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.AssignBool(false)
}
func (_Map__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.AssignInt(0)
}
func (_Map__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.AssignFloat(0)
}
func (_Map__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.AssignString("")
}
func (_Map__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.AssignBytes(nil)
}
func (_Map__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Map.Repr"}.AssignLink(nil)
}
func (na *_Map__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Map.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Map__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.w = &tz.v
		ma.va.m = &ma.cm
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.va.w = nil
		ma.cm = schema.Maybe_Absent
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, datamodel.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.w = &tz.v
	ma.va.m = &ma.cm
	return &ma.va, nil
}
func (ma *_Map__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) ValuePrototype(_ string) datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n _Recipient) FieldHeader() MaybeMap {
	return &n.header
}
func (n _Recipient) FieldEncrypted_key() MaybeString {
	return &n.encrypted_key
}

type _Recipient__Maybe struct {
	m schema.Maybe
	v Recipient
}
type MaybeRecipient = *_Recipient__Maybe

func (m MaybeRecipient) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeRecipient) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeRecipient) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeRecipient) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeRecipient) Must() Recipient {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__Recipient_Header        = _String{"header"}
	fieldName__Recipient_Encrypted_key = _String{"encrypted_key"}
)
var _ datamodel.Node = (Recipient)(&_Recipient{})
var _ schema.TypedNode = (Recipient)(&_Recipient{})

func (Recipient) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Recipient) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "header":
		if n.header.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.header.v, nil
	case "encrypted_key":
		if n.encrypted_key.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.encrypted_key.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Recipient) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Recipient) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.LookupByIndex(0)
}
func (n Recipient) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Recipient) MapIterator() datamodel.MapIterator {
	return &_Recipient__MapItr{n, 0}
}

type _Recipient__MapItr struct {
	n   Recipient
	idx int
}

func (itr *_Recipient__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Recipient_Header
		if itr.n.header.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.header.v
	case 1:
		k = &fieldName__Recipient_Encrypted_key
		if itr.n.encrypted_key.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.encrypted_key.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Recipient__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Recipient) ListIterator() datamodel.ListIterator {
	return nil
}
func (Recipient) Length() int64 {
	return 2
}
func (Recipient) IsAbsent() bool {
	return false
}
func (Recipient) IsNull() bool {
	return false
}
func (Recipient) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.AsBool()
}
func (Recipient) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.AsInt()
}
func (Recipient) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.AsFloat()
}
func (Recipient) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.AsString()
}
func (Recipient) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.AsBytes()
}
func (Recipient) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Recipient"}.AsLink()
}
func (Recipient) Prototype() datamodel.NodePrototype {
	return _Recipient__Prototype{}
}

type _Recipient__Prototype struct{}

func (_Recipient__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Recipient__Builder
	nb.Reset()
	return &nb
}

type _Recipient__Builder struct {
	_Recipient__Assembler
}

func (nb *_Recipient__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Recipient__Builder) Reset() {
	var w _Recipient
	var m schema.Maybe
	*nb = _Recipient__Builder{_Recipient__Assembler{w: &w, m: &m}}
}

type _Recipient__Assembler struct {
	w     *_Recipient
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm               schema.Maybe
	ca_header        _Map__Assembler
	ca_encrypted_key _String__Assembler
}

func (na *_Recipient__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_header.reset()
	na.ca_encrypted_key.reset()
}

var (
	fieldBit__Recipient_Header        = 1 << 0
	fieldBit__Recipient_Encrypted_key = 1 << 1
	fieldBits__Recipient_sufficient   = 0
)

func (na *_Recipient__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Recipient{}
	}
	return na, nil
}
func (_Recipient__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.BeginList(0)
}
func (na *_Recipient__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Recipient__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignBool(false)
}
func (_Recipient__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignInt(0)
}
func (_Recipient__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignFloat(0)
}
func (_Recipient__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignString("")
}
func (_Recipient__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignBytes(nil)
}
func (_Recipient__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient"}.AssignLink(nil)
}
func (na *_Recipient__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Recipient); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Recipient", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Recipient__Assembler) Prototype() datamodel.NodePrototype {
	return _Recipient__Prototype{}
}
func (ma *_Recipient__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.header.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.encrypted_key.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Recipient__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "header":
		if ma.s&fieldBit__Recipient_Header != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Header}
		}
		ma.s += fieldBit__Recipient_Header
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m
		return &ma.ca_header, nil
	case "encrypted_key":
		if ma.s&fieldBit__Recipient_Encrypted_key != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Encrypted_key}
		}
		ma.s += fieldBit__Recipient_Encrypted_key
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_encrypted_key.w = &ma.w.encrypted_key.v
		ma.ca_encrypted_key.m = &ma.w.encrypted_key.m
		return &ma.ca_encrypted_key, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.Recipient", Key: &_String{k}}
}
func (ma *_Recipient__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Recipient__KeyAssembler)(ma)
}
func (ma *_Recipient__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m
		return &ma.ca_header
	case 1:
		ma.ca_encrypted_key.w = &ma.w.encrypted_key.v
		ma.ca_encrypted_key.m = &ma.w.encrypted_key.m
		return &ma.ca_encrypted_key
	default:
		panic("unreachable")
	}
}
func (ma *_Recipient__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Recipient_sufficient != fieldBits__Recipient_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Recipient__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Recipient__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _Recipient__KeyAssembler _Recipient__Assembler

func (_Recipient__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.BeginMap(0)
}
func (_Recipient__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.BeginList(0)
}
func (na *_Recipient__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.AssignNull()
}
func (_Recipient__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.AssignBool(false)
}
func (_Recipient__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.AssignInt(0)
}
func (_Recipient__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Recipient__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "header":
		if ka.s&fieldBit__Recipient_Header != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Header}
		}
		ka.s += fieldBit__Recipient_Header
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "encrypted_key":
		if ka.s&fieldBit__Recipient_Encrypted_key != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Encrypted_key}
		}
		ka.s += fieldBit__Recipient_Encrypted_key
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "dagjose.Recipient", Key: &_String{k}}
	}
}
func (_Recipient__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.AssignBytes(nil)
}
func (_Recipient__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Recipient__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Recipient__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Recipient) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Recipient) Representation() datamodel.Node {
	return (*_Recipient__Repr)(n)
}

type _Recipient__Repr _Recipient

var (
	fieldName__Recipient_Header_serial        = _String{"header"}
	fieldName__Recipient_Encrypted_key_serial = _String{"encrypted_key"}
)
var _ datamodel.Node = &_Recipient__Repr{}

func (_Recipient__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Recipient__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "header":
		if n.header.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.header.v.Representation(), nil
	case "encrypted_key":
		if n.encrypted_key.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.encrypted_key.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Recipient__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Recipient__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.LookupByIndex(0)
}
func (n _Recipient__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Recipient__Repr) MapIterator() datamodel.MapIterator {
	end := 2
	if n.encrypted_key.m == schema.Maybe_Absent {
		end = 1
	} else {
		goto done
	}
	if n.header.m == schema.Maybe_Absent {
		end = 0
	} else {
		goto done
	}
done:
	return &_Recipient__ReprMapItr{n, 0, end}
}

type _Recipient__ReprMapItr struct {
	n   *_Recipient__Repr
	idx int
	end int
}

func (itr *_Recipient__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
advance:
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Recipient_Header_serial
		if itr.n.header.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.header.v.Representation()
	case 1:
		k = &fieldName__Recipient_Encrypted_key_serial
		if itr.n.encrypted_key.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.encrypted_key.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Recipient__ReprMapItr) Done() bool {
	return itr.idx >= itr.end
}
func (_Recipient__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Recipient__Repr) Length() int64 {
	l := 2
	if rn.header.m == schema.Maybe_Absent {
		l--
	}
	if rn.encrypted_key.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_Recipient__Repr) IsAbsent() bool {
	return false
}
func (_Recipient__Repr) IsNull() bool {
	return false
}
func (_Recipient__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.AsBool()
}
func (_Recipient__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.AsInt()
}
func (_Recipient__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.AsFloat()
}
func (_Recipient__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.AsString()
}
func (_Recipient__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.AsBytes()
}
func (_Recipient__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Recipient.Repr"}.AsLink()
}
func (_Recipient__Repr) Prototype() datamodel.NodePrototype {
	return _Recipient__ReprPrototype{}
}

type _Recipient__ReprPrototype struct{}

func (_Recipient__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Recipient__ReprBuilder
	nb.Reset()
	return &nb
}

type _Recipient__ReprBuilder struct {
	_Recipient__ReprAssembler
}

func (nb *_Recipient__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Recipient__ReprBuilder) Reset() {
	var w _Recipient__Repr
	var m schema.Maybe
	*nb = _Recipient__ReprBuilder{_Recipient__ReprAssembler{w: &w, m: &m}}
}

type _Recipient__ReprAssembler struct {
	w     *_Recipient__Repr
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm               schema.Maybe
	ca_header        _Map__ReprAssembler
	ca_encrypted_key _String__ReprAssembler
}

func (na *_Recipient__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_header.reset()
	na.ca_encrypted_key.reset()
}
func (na *_Recipient__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Recipient{}
	}
	return na, nil
}
func (_Recipient__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.BeginList(0)
}
func (na *_Recipient__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Recipient__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.AssignBool(false)
}
func (_Recipient__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.AssignInt(0)
}
func (_Recipient__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.AssignFloat(0)
}
func (_Recipient__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.AssignString("")
}
func (_Recipient__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.AssignBytes(nil)
}
func (_Recipient__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Recipient.Repr"}.AssignLink(nil)
}
func (na *_Recipient__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Recipient); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Recipient.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Recipient__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Recipient__ReprPrototype{}
}
func (ma *_Recipient__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.header.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.encrypted_key.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Recipient__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "header":
		if ma.s&fieldBit__Recipient_Header != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Header_serial}
		}
		ma.s += fieldBit__Recipient_Header
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m

		return &ma.ca_header, nil
	case "encrypted_key":
		if ma.s&fieldBit__Recipient_Encrypted_key != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Encrypted_key_serial}
		}
		ma.s += fieldBit__Recipient_Encrypted_key
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_encrypted_key.w = &ma.w.encrypted_key.v
		ma.ca_encrypted_key.m = &ma.w.encrypted_key.m

		return &ma.ca_encrypted_key, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.Recipient.Repr", Key: &_String{k}}
}
func (ma *_Recipient__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Recipient__ReprKeyAssembler)(ma)
}
func (ma *_Recipient__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m

		return &ma.ca_header
	case 1:
		ma.ca_encrypted_key.w = &ma.w.encrypted_key.v
		ma.ca_encrypted_key.m = &ma.w.encrypted_key.m

		return &ma.ca_encrypted_key
	default:
		panic("unreachable")
	}
}
func (ma *_Recipient__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Recipient_sufficient != fieldBits__Recipient_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Recipient__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Recipient__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _Recipient__ReprKeyAssembler _Recipient__ReprAssembler

func (_Recipient__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Recipient__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Recipient__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.AssignNull()
}
func (_Recipient__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Recipient__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Recipient__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Recipient__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "header":
		if ka.s&fieldBit__Recipient_Header != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Header_serial}
		}
		ka.s += fieldBit__Recipient_Header
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "encrypted_key":
		if ka.s&fieldBit__Recipient_Encrypted_key != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Recipient_Encrypted_key_serial}
		}
		ka.s += fieldBit__Recipient_Encrypted_key
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "dagjose.Recipient.Repr", Key: &_String{k}}
}
func (_Recipient__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Recipient__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.Recipient.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Recipient__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Recipient__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n *_Recipients) Lookup(idx int64) Recipient {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Recipients) LookupMaybe(idx int64) MaybeRecipient {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Recipient__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Recipients__valueAbsent = _Recipient__Maybe{m: schema.Maybe_Absent}

func (n Recipients) Iterator() *Recipients__Itr {
	return &Recipients__Itr{n, 0}
}

type Recipients__Itr struct {
	n   Recipients
	idx int
}

func (itr *Recipients__Itr) Next() (idx int64, v Recipient) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Recipients__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Recipients__Maybe struct {
	m schema.Maybe
	v _Recipients
}
type MaybeRecipients = *_Recipients__Maybe

func (m MaybeRecipients) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeRecipients) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeRecipients) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeRecipients) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeRecipients) Must() Recipients {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Recipients)(&_Recipients{})
var _ schema.TypedNode = (Recipients)(&_Recipients{})

func (Recipients) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (Recipients) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.LookupByString("")
}
func (n Recipients) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Recipients) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Recipients) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "dagjose.Recipients", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Recipients) MapIterator() datamodel.MapIterator {
	return nil
}
func (n Recipients) ListIterator() datamodel.ListIterator {
	return &_Recipients__ListItr{n, 0}
}

type _Recipients__ListItr struct {
	n   Recipients
	idx int
}

func (itr *_Recipients__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Recipients__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Recipients) Length() int64 {
	return int64(len(n.x))
}
func (Recipients) IsAbsent() bool {
	return false
}
func (Recipients) IsNull() bool {
	return false
}
func (Recipients) AsBool() (bool, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.AsBool()
}
func (Recipients) AsInt() (int64, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.AsInt()
}
func (Recipients) AsFloat() (float64, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.AsFloat()
}
func (Recipients) AsString() (string, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.AsString()
}
func (Recipients) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.AsBytes()
}
func (Recipients) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "dagjose.Recipients"}.AsLink()
}
func (Recipients) Prototype() datamodel.NodePrototype {
	return _Recipients__Prototype{}
}

type _Recipients__Prototype struct{}

func (_Recipients__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Recipients__Builder
	nb.Reset()
	return &nb
}

type _Recipients__Builder struct {
	_Recipients__Assembler
}

func (nb *_Recipients__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Recipients__Builder) Reset() {
	var w _Recipients
	var m schema.Maybe
	*nb = _Recipients__Builder{_Recipients__Assembler{w: &w, m: &m}}
}

type _Recipients__Assembler struct {
	w     *_Recipients
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Recipient__Assembler
}

func (na *_Recipients__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Recipients__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.BeginMap(0)
}
func (na *_Recipients__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Recipient, 0, sizeHint)
	}
	return na, nil
}
func (na *_Recipients__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Recipients__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignBool(false)
}
func (_Recipients__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignInt(0)
}
func (_Recipients__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignFloat(0)
}
func (_Recipients__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignString("")
}
func (_Recipients__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignBytes(nil)
}
func (_Recipients__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients"}.AssignLink(nil)
}
func (na *_Recipients__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Recipients); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Recipients", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Recipients__Assembler) Prototype() datamodel.NodePrototype {
	return _Recipients__Prototype{}
}
func (la *_Recipients__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Recipients__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Recipient{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Recipients__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Recipients__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Recipient__Prototype{}
}
func (Recipients) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Recipients) Representation() datamodel.Node {
	return (*_Recipients__Repr)(n)
}

type _Recipients__Repr _Recipients

var _ datamodel.Node = &_Recipients__Repr{}

func (_Recipients__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_Recipients__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.LookupByString("")
}
func (nr *_Recipients__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (Recipients)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Recipient).Representation(), nil
}
func (nr *_Recipients__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (Recipients)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Recipient).Representation(), nil
}
func (n _Recipients__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "dagjose.Recipients.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Recipients__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_Recipients__Repr) ListIterator() datamodel.ListIterator {
	return &_Recipients__ReprListItr{(Recipients)(nr), 0}
}

type _Recipients__ReprListItr _Recipients__ListItr

func (itr *_Recipients__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_Recipients__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Recipient).Representation(), nil
}
func (itr *_Recipients__ReprListItr) Done() bool {
	return (*_Recipients__ListItr)(itr).Done()
}

func (rn *_Recipients__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Recipients__Repr) IsAbsent() bool {
	return false
}
func (_Recipients__Repr) IsNull() bool {
	return false
}
func (_Recipients__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.AsBool()
}
func (_Recipients__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.AsInt()
}
func (_Recipients__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.AsFloat()
}
func (_Recipients__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.AsString()
}
func (_Recipients__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.AsBytes()
}
func (_Recipients__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "dagjose.Recipients.Repr"}.AsLink()
}
func (_Recipients__Repr) Prototype() datamodel.NodePrototype {
	return _Recipients__ReprPrototype{}
}

type _Recipients__ReprPrototype struct{}

func (_Recipients__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Recipients__ReprBuilder
	nb.Reset()
	return &nb
}

type _Recipients__ReprBuilder struct {
	_Recipients__ReprAssembler
}

func (nb *_Recipients__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Recipients__ReprBuilder) Reset() {
	var w _Recipients__Repr
	var m schema.Maybe
	*nb = _Recipients__ReprBuilder{_Recipients__ReprAssembler{w: &w, m: &m}}
}

type _Recipients__ReprAssembler struct {
	w     *_Recipients__Repr
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Recipient__ReprAssembler
}

func (na *_Recipients__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Recipients__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.BeginMap(0)
}
func (na *_Recipients__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Recipient, 0, sizeHint)
	}
	return na, nil
}
func (na *_Recipients__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Recipients__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.AssignBool(false)
}
func (_Recipients__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.AssignInt(0)
}
func (_Recipients__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.AssignFloat(0)
}
func (_Recipients__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.AssignString("")
}
func (_Recipients__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.AssignBytes(nil)
}
func (_Recipients__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "dagjose.Recipients.Repr"}.AssignLink(nil)
}
func (na *_Recipients__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Recipients); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Recipients.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Recipients__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Recipients__ReprPrototype{}
}
func (la *_Recipients__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Recipients__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Recipient{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Recipients__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Recipients__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Recipient__ReprPrototype{}
}

func (n _Signature) FieldHeader() MaybeMap {
	return &n.header
}
func (n _Signature) FieldProtected() MaybeString {
	return &n.protected
}
func (n _Signature) FieldSignature() String {
	return &n.signature
}

type _Signature__Maybe struct {
	m schema.Maybe
	v Signature
}
type MaybeSignature = *_Signature__Maybe

func (m MaybeSignature) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSignature) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSignature) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSignature) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSignature) Must() Signature {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__Signature_Header    = _String{"header"}
	fieldName__Signature_Protected = _String{"protected"}
	fieldName__Signature_Signature = _String{"signature"}
)
var _ datamodel.Node = (Signature)(&_Signature{})
var _ schema.TypedNode = (Signature)(&_Signature{})

func (Signature) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Signature) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "header":
		if n.header.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.header.v, nil
	case "protected":
		if n.protected.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.protected.v, nil
	case "signature":
		return &n.signature, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Signature) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Signature) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.LookupByIndex(0)
}
func (n Signature) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Signature) MapIterator() datamodel.MapIterator {
	return &_Signature__MapItr{n, 0}
}

type _Signature__MapItr struct {
	n   Signature
	idx int
}

func (itr *_Signature__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 3 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Signature_Header
		if itr.n.header.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.header.v
	case 1:
		k = &fieldName__Signature_Protected
		if itr.n.protected.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.protected.v
	case 2:
		k = &fieldName__Signature_Signature
		v = &itr.n.signature
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Signature__MapItr) Done() bool {
	return itr.idx >= 3
}

func (Signature) ListIterator() datamodel.ListIterator {
	return nil
}
func (Signature) Length() int64 {
	return 3
}
func (Signature) IsAbsent() bool {
	return false
}
func (Signature) IsNull() bool {
	return false
}
func (Signature) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.AsBool()
}
func (Signature) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.AsInt()
}
func (Signature) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.AsFloat()
}
func (Signature) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.AsString()
}
func (Signature) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.AsBytes()
}
func (Signature) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Signature"}.AsLink()
}
func (Signature) Prototype() datamodel.NodePrototype {
	return _Signature__Prototype{}
}

type _Signature__Prototype struct{}

func (_Signature__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Signature__Builder
	nb.Reset()
	return &nb
}

type _Signature__Builder struct {
	_Signature__Assembler
}

func (nb *_Signature__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Signature__Builder) Reset() {
	var w _Signature
	var m schema.Maybe
	*nb = _Signature__Builder{_Signature__Assembler{w: &w, m: &m}}
}

type _Signature__Assembler struct {
	w     *_Signature
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm           schema.Maybe
	ca_header    _Map__Assembler
	ca_protected _String__Assembler
	ca_signature _String__Assembler
}

func (na *_Signature__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_header.reset()
	na.ca_protected.reset()
	na.ca_signature.reset()
}

var (
	fieldBit__Signature_Header      = 1 << 0
	fieldBit__Signature_Protected   = 1 << 1
	fieldBit__Signature_Signature   = 1 << 2
	fieldBits__Signature_sufficient = 0 + 1<<2
)

func (na *_Signature__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Signature{}
	}
	return na, nil
}
func (_Signature__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.BeginList(0)
}
func (na *_Signature__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Signature__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignBool(false)
}
func (_Signature__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignInt(0)
}
func (_Signature__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignFloat(0)
}
func (_Signature__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignString("")
}
func (_Signature__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignBytes(nil)
}
func (_Signature__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature"}.AssignLink(nil)
}
func (na *_Signature__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Signature); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Signature", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Signature__Assembler) Prototype() datamodel.NodePrototype {
	return _Signature__Prototype{}
}
func (ma *_Signature__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.header.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.protected.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_signature.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Signature__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "header":
		if ma.s&fieldBit__Signature_Header != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Header}
		}
		ma.s += fieldBit__Signature_Header
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m
		return &ma.ca_header, nil
	case "protected":
		if ma.s&fieldBit__Signature_Protected != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Protected}
		}
		ma.s += fieldBit__Signature_Protected
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m
		return &ma.ca_protected, nil
	case "signature":
		if ma.s&fieldBit__Signature_Signature != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Signature}
		}
		ma.s += fieldBit__Signature_Signature
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_signature.w = &ma.w.signature
		ma.ca_signature.m = &ma.cm
		return &ma.ca_signature, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.Signature", Key: &_String{k}}
}
func (ma *_Signature__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Signature__KeyAssembler)(ma)
}
func (ma *_Signature__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m
		return &ma.ca_header
	case 1:
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m
		return &ma.ca_protected
	case 2:
		ma.ca_signature.w = &ma.w.signature
		ma.ca_signature.m = &ma.cm
		return &ma.ca_signature
	default:
		panic("unreachable")
	}
}
func (ma *_Signature__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Signature_sufficient != fieldBits__Signature_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Signature_Signature == 0 {
			err.Missing = append(err.Missing, "signature")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Signature__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Signature__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _Signature__KeyAssembler _Signature__Assembler

func (_Signature__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.BeginMap(0)
}
func (_Signature__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.BeginList(0)
}
func (na *_Signature__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.AssignNull()
}
func (_Signature__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.AssignBool(false)
}
func (_Signature__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.AssignInt(0)
}
func (_Signature__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Signature__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "header":
		if ka.s&fieldBit__Signature_Header != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Header}
		}
		ka.s += fieldBit__Signature_Header
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "protected":
		if ka.s&fieldBit__Signature_Protected != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Protected}
		}
		ka.s += fieldBit__Signature_Protected
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "signature":
		if ka.s&fieldBit__Signature_Signature != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Signature}
		}
		ka.s += fieldBit__Signature_Signature
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "dagjose.Signature", Key: &_String{k}}
	}
}
func (_Signature__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.AssignBytes(nil)
}
func (_Signature__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Signature__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Signature__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Signature) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Signature) Representation() datamodel.Node {
	return (*_Signature__Repr)(n)
}

type _Signature__Repr _Signature

var (
	fieldName__Signature_Header_serial    = _String{"header"}
	fieldName__Signature_Protected_serial = _String{"protected"}
	fieldName__Signature_Signature_serial = _String{"signature"}
)
var _ datamodel.Node = &_Signature__Repr{}

func (_Signature__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Signature__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "header":
		if n.header.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.header.v.Representation(), nil
	case "protected":
		if n.protected.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.protected.v.Representation(), nil
	case "signature":
		return n.signature.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Signature__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Signature__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.LookupByIndex(0)
}
func (n _Signature__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Signature__Repr) MapIterator() datamodel.MapIterator {
	return &_Signature__ReprMapItr{n, 0}
}

type _Signature__ReprMapItr struct {
	n   *_Signature__Repr
	idx int
}

func (itr *_Signature__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
advance:
	if itr.idx >= 3 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Signature_Header_serial
		if itr.n.header.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.header.v.Representation()
	case 1:
		k = &fieldName__Signature_Protected_serial
		if itr.n.protected.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.protected.v.Representation()
	case 2:
		k = &fieldName__Signature_Signature_serial
		v = itr.n.signature.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Signature__ReprMapItr) Done() bool {
	return itr.idx >= 3
}
func (_Signature__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Signature__Repr) Length() int64 {
	l := 3
	if rn.header.m == schema.Maybe_Absent {
		l--
	}
	if rn.protected.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_Signature__Repr) IsAbsent() bool {
	return false
}
func (_Signature__Repr) IsNull() bool {
	return false
}
func (_Signature__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.AsBool()
}
func (_Signature__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.AsInt()
}
func (_Signature__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.AsFloat()
}
func (_Signature__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.AsString()
}
func (_Signature__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.AsBytes()
}
func (_Signature__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "dagjose.Signature.Repr"}.AsLink()
}
func (_Signature__Repr) Prototype() datamodel.NodePrototype {
	return _Signature__ReprPrototype{}
}

type _Signature__ReprPrototype struct{}

func (_Signature__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Signature__ReprBuilder
	nb.Reset()
	return &nb
}

type _Signature__ReprBuilder struct {
	_Signature__ReprAssembler
}

func (nb *_Signature__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Signature__ReprBuilder) Reset() {
	var w _Signature__Repr
	var m schema.Maybe
	*nb = _Signature__ReprBuilder{_Signature__ReprAssembler{w: &w, m: &m}}
}

type _Signature__ReprAssembler struct {
	w     *_Signature__Repr
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm           schema.Maybe
	ca_header    _Map__ReprAssembler
	ca_protected _String__ReprAssembler
	ca_signature _String__ReprAssembler
}

func (na *_Signature__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_header.reset()
	na.ca_protected.reset()
	na.ca_signature.reset()
}
func (na *_Signature__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Signature{}
	}
	return na, nil
}
func (_Signature__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.BeginList(0)
}
func (na *_Signature__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Signature__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.AssignBool(false)
}
func (_Signature__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.AssignInt(0)
}
func (_Signature__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.AssignFloat(0)
}
func (_Signature__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.AssignString("")
}
func (_Signature__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.AssignBytes(nil)
}
func (_Signature__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "dagjose.Signature.Repr"}.AssignLink(nil)
}
func (na *_Signature__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Signature); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Signature.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Signature__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Signature__ReprPrototype{}
}
func (ma *_Signature__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.header.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.protected.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Signature__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "header":
		if ma.s&fieldBit__Signature_Header != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Header_serial}
		}
		ma.s += fieldBit__Signature_Header
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m

		return &ma.ca_header, nil
	case "protected":
		if ma.s&fieldBit__Signature_Protected != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Protected_serial}
		}
		ma.s += fieldBit__Signature_Protected
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m

		return &ma.ca_protected, nil
	case "signature":
		if ma.s&fieldBit__Signature_Signature != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Signature_serial}
		}
		ma.s += fieldBit__Signature_Signature
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_signature.w = &ma.w.signature
		ma.ca_signature.m = &ma.cm
		return &ma.ca_signature, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "dagjose.Signature.Repr", Key: &_String{k}}
}
func (ma *_Signature__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Signature__ReprKeyAssembler)(ma)
}
func (ma *_Signature__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_header.w = &ma.w.header.v
		ma.ca_header.m = &ma.w.header.m

		return &ma.ca_header
	case 1:
		ma.ca_protected.w = &ma.w.protected.v
		ma.ca_protected.m = &ma.w.protected.m

		return &ma.ca_protected
	case 2:
		ma.ca_signature.w = &ma.w.signature
		ma.ca_signature.m = &ma.cm
		return &ma.ca_signature
	default:
		panic("unreachable")
	}
}
func (ma *_Signature__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Signature_sufficient != fieldBits__Signature_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Signature_Signature == 0 {
			err.Missing = append(err.Missing, "signature")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Signature__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Signature__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _Signature__ReprKeyAssembler _Signature__ReprAssembler

func (_Signature__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Signature__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Signature__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.AssignNull()
}
func (_Signature__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Signature__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Signature__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Signature__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "header":
		if ka.s&fieldBit__Signature_Header != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Header_serial}
		}
		ka.s += fieldBit__Signature_Header
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "protected":
		if ka.s&fieldBit__Signature_Protected != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Protected_serial}
		}
		ka.s += fieldBit__Signature_Protected
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "signature":
		if ka.s&fieldBit__Signature_Signature != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Signature_Signature_serial}
		}
		ka.s += fieldBit__Signature_Signature
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "dagjose.Signature.Repr", Key: &_String{k}}
}
func (_Signature__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Signature__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.Signature.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Signature__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Signature__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n *_Signatures) Lookup(idx int64) Signature {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Signatures) LookupMaybe(idx int64) MaybeSignature {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Signature__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Signatures__valueAbsent = _Signature__Maybe{m: schema.Maybe_Absent}

func (n Signatures) Iterator() *Signatures__Itr {
	return &Signatures__Itr{n, 0}
}

type Signatures__Itr struct {
	n   Signatures
	idx int
}

func (itr *Signatures__Itr) Next() (idx int64, v Signature) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Signatures__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Signatures__Maybe struct {
	m schema.Maybe
	v _Signatures
}
type MaybeSignatures = *_Signatures__Maybe

func (m MaybeSignatures) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSignatures) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSignatures) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSignatures) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSignatures) Must() Signatures {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Signatures)(&_Signatures{})
var _ schema.TypedNode = (Signatures)(&_Signatures{})

func (Signatures) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (Signatures) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.LookupByString("")
}
func (n Signatures) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Signatures) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Signatures) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "dagjose.Signatures", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Signatures) MapIterator() datamodel.MapIterator {
	return nil
}
func (n Signatures) ListIterator() datamodel.ListIterator {
	return &_Signatures__ListItr{n, 0}
}

type _Signatures__ListItr struct {
	n   Signatures
	idx int
}

func (itr *_Signatures__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Signatures__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Signatures) Length() int64 {
	return int64(len(n.x))
}
func (Signatures) IsAbsent() bool {
	return false
}
func (Signatures) IsNull() bool {
	return false
}
func (Signatures) AsBool() (bool, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.AsBool()
}
func (Signatures) AsInt() (int64, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.AsInt()
}
func (Signatures) AsFloat() (float64, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.AsFloat()
}
func (Signatures) AsString() (string, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.AsString()
}
func (Signatures) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.AsBytes()
}
func (Signatures) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "dagjose.Signatures"}.AsLink()
}
func (Signatures) Prototype() datamodel.NodePrototype {
	return _Signatures__Prototype{}
}

type _Signatures__Prototype struct{}

func (_Signatures__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Signatures__Builder
	nb.Reset()
	return &nb
}

type _Signatures__Builder struct {
	_Signatures__Assembler
}

func (nb *_Signatures__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Signatures__Builder) Reset() {
	var w _Signatures
	var m schema.Maybe
	*nb = _Signatures__Builder{_Signatures__Assembler{w: &w, m: &m}}
}

type _Signatures__Assembler struct {
	w     *_Signatures
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Signature__Assembler
}

func (na *_Signatures__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Signatures__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.BeginMap(0)
}
func (na *_Signatures__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Signature, 0, sizeHint)
	}
	return na, nil
}
func (na *_Signatures__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Signatures__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignBool(false)
}
func (_Signatures__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignInt(0)
}
func (_Signatures__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignFloat(0)
}
func (_Signatures__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignString("")
}
func (_Signatures__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignBytes(nil)
}
func (_Signatures__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures"}.AssignLink(nil)
}
func (na *_Signatures__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Signatures); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Signatures", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Signatures__Assembler) Prototype() datamodel.NodePrototype {
	return _Signatures__Prototype{}
}
func (la *_Signatures__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Signatures__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Signature{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Signatures__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Signatures__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Signature__Prototype{}
}
func (Signatures) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Signatures) Representation() datamodel.Node {
	return (*_Signatures__Repr)(n)
}

type _Signatures__Repr _Signatures

var _ datamodel.Node = &_Signatures__Repr{}

func (_Signatures__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_Signatures__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.LookupByString("")
}
func (nr *_Signatures__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (Signatures)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Signature).Representation(), nil
}
func (nr *_Signatures__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (Signatures)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Signature).Representation(), nil
}
func (n _Signatures__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "dagjose.Signatures.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Signatures__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_Signatures__Repr) ListIterator() datamodel.ListIterator {
	return &_Signatures__ReprListItr{(Signatures)(nr), 0}
}

type _Signatures__ReprListItr _Signatures__ListItr

func (itr *_Signatures__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_Signatures__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Signature).Representation(), nil
}
func (itr *_Signatures__ReprListItr) Done() bool {
	return (*_Signatures__ListItr)(itr).Done()
}

func (rn *_Signatures__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Signatures__Repr) IsAbsent() bool {
	return false
}
func (_Signatures__Repr) IsNull() bool {
	return false
}
func (_Signatures__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.AsBool()
}
func (_Signatures__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.AsInt()
}
func (_Signatures__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.AsFloat()
}
func (_Signatures__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.AsString()
}
func (_Signatures__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.AsBytes()
}
func (_Signatures__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "dagjose.Signatures.Repr"}.AsLink()
}
func (_Signatures__Repr) Prototype() datamodel.NodePrototype {
	return _Signatures__ReprPrototype{}
}

type _Signatures__ReprPrototype struct{}

func (_Signatures__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Signatures__ReprBuilder
	nb.Reset()
	return &nb
}

type _Signatures__ReprBuilder struct {
	_Signatures__ReprAssembler
}

func (nb *_Signatures__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Signatures__ReprBuilder) Reset() {
	var w _Signatures__Repr
	var m schema.Maybe
	*nb = _Signatures__ReprBuilder{_Signatures__ReprAssembler{w: &w, m: &m}}
}

type _Signatures__ReprAssembler struct {
	w     *_Signatures__Repr
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Signature__ReprAssembler
}

func (na *_Signatures__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Signatures__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.BeginMap(0)
}
func (na *_Signatures__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Signature, 0, sizeHint)
	}
	return na, nil
}
func (na *_Signatures__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Signatures__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.AssignBool(false)
}
func (_Signatures__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.AssignInt(0)
}
func (_Signatures__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.AssignFloat(0)
}
func (_Signatures__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.AssignString("")
}
func (_Signatures__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.AssignBytes(nil)
}
func (_Signatures__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "dagjose.Signatures.Repr"}.AssignLink(nil)
}
func (na *_Signatures__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Signatures); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "dagjose.Signatures.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Signatures__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Signatures__ReprPrototype{}
}
func (la *_Signatures__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Signatures__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Signature{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Signatures__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Signatures__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Signature__ReprPrototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}

type _String__Maybe struct {
	m schema.Maybe
	v _String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})

func (String) Kind() datamodel.Kind {
	return datamodel.Kind_String
}
func (String) LookupByString(string) (datamodel.Node, error) {
	return mixins.String{TypeName: "dagjose.String"}.LookupByString("")
}
func (String) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.String{TypeName: "dagjose.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.String{TypeName: "dagjose.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.String{TypeName: "dagjose.String"}.LookupBySegment(seg)
}
func (String) MapIterator() datamodel.MapIterator {
	return nil
}
func (String) ListIterator() datamodel.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{TypeName: "dagjose.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{TypeName: "dagjose.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{TypeName: "dagjose.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "dagjose.String"}.AsBytes()
}
func (String) AsLink() (datamodel.Link, error) {
	return mixins.String{TypeName: "dagjose.String"}.AsLink()
}
func (String) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}

type _String__Builder struct {
	_String__Assembler
}

func (nb *_String__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}

type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "dagjose.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "dagjose.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() datamodel.Node {
	return (*_String__Repr)(n)
}

type _String__Repr = _String

var _ datamodel.Node = &_String__Repr{}

type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler
